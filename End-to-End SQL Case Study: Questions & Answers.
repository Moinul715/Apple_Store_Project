# 🧠 Apple Retail SQL Project  
### Business Questions & SQL Solutions (1M+ Rows Dataset)

---

## 🟦 Foundational to Intermediate

### 1. How many Apple retail stores operate in each country?
```sql
SELECT 
    country,
    COUNT(store_id) AS total_stores
FROM stores
GROUP BY country
ORDER BY total_stores DESC;
```

---

### 2. What is the total number of units sold by each store?
```sql
SELECT 
    s.store_id,
    st.store_name,
    SUM(s.quantity) AS total_units_sold
FROM sales s
JOIN stores st ON s.store_id = st.store_id
GROUP BY s.store_id, st.store_name
ORDER BY total_units_sold DESC;
```

---

### 3. How many sales transactions took place in December 2023?
```sql
SELECT 
    COUNT(sale_id) AS total_sales
FROM sales
WHERE TO_CHAR(sale_date, 'MM-YYYY') = '12-2023';
```

---

### 4. Which stores have never had a warranty claim associated with their sales?
```sql
SELECT COUNT(*) 
FROM stores
WHERE store_id NOT IN (
    SELECT DISTINCT s.store_id
    FROM sales s
    JOIN warranty w ON s.sale_id = w.sale_id
);
```

---

### 5. What percentage of all warranty claims were marked as “Warranty Void”?
```sql
SELECT 
    ROUND(
        COUNT(claim_id) * 100.0 / 
        (SELECT COUNT(*) FROM warranty), 
    2) AS warranty_void_percentage
FROM warranty
WHERE repair_status = 'Warranty Void';
```

---

### 6. Which store recorded the highest total unit sales in the past 12 months?
```sql
SELECT 
    s.store_id,
    st.store_name,
    SUM(s.quantity) AS total_units
FROM sales s
JOIN stores st ON s.store_id = st.store_id
WHERE sale_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY s.store_id, st.store_name
ORDER BY total_units DESC
LIMIT 1;
```

---

### 7. How many unique products were sold in the last year?
```sql
SELECT 
    COUNT(DISTINCT product_id) AS unique_products_sold
FROM sales
WHERE sale_date >= CURRENT_DATE - INTERVAL '1 year';
```

---

### 8. What is the average product price within each product category?
```sql
SELECT 
    c.category_name,
    AVG(p.price) AS average_price
FROM products p
JOIN category c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY average_price DESC;
```

---

### 9. How many warranty claims were submitted during the year 2020?
```sql
SELECT 
    COUNT(*) AS warranty_claims_2020
FROM warranty
WHERE EXTRACT(YEAR FROM claim_date) = 2020;
```

---

### 10. For each store, which day of the week had the highest total units sold?
```sql
SELECT * 
FROM (
    SELECT 
        store_id,
        TO_CHAR(sale_date, 'Day') AS day_name,
        SUM(quantity) AS total_units,
        RANK() OVER (PARTITION BY store_id ORDER BY SUM(quantity) DESC) AS rank
    FROM sales
    GROUP BY store_id, TO_CHAR(sale_date, 'Day')
) t
WHERE rank = 1;
```

---

## 🟨 Intermediate to Advanced

### 11. Which product had the lowest total sales in each country, year by year?
```sql
WITH product_rank AS (
    SELECT 
        st.country,
        p.product_name,
        EXTRACT(YEAR FROM s.sale_date) AS year,
        SUM(s.quantity) AS total_qty_sold,
        RANK() OVER(PARTITION BY st.country, EXTRACT(YEAR FROM s.sale_date) ORDER BY SUM(s.quantity)) AS rank
    FROM sales s
    JOIN stores st ON s.store_id = st.store_id
    JOIN products p ON s.product_id = p.product_id
    GROUP BY st.country, p.product_name, year
)
SELECT * 
FROM product_rank
WHERE rank = 1;
```

---

### 12. How many warranty claims were filed within 180 days of the original sale date?
```sql
SELECT 
    COUNT(*) AS claims_within_180_days
FROM warranty w
JOIN sales s ON s.sale_id = w.sale_id
WHERE w.claim_date - s.sale_date <= 180;
```

---

### 13. How many warranty claims were linked to products launched within the last two years?
```sql
SELECT 
    p.product_name,
    COUNT(w.claim_id) AS total_claims
FROM warranty w
JOIN sales s ON s.sale_id = w.sale_id
JOIN products p ON p.product_id = s.product_id
WHERE p.launch_date >= CURRENT_DATE - INTERVAL '2 years'
GROUP BY p.product_name
HAVING COUNT(w.claim_id) > 0;
```

---

### 14. Which months in the past three years saw U.S. sales exceed 5,000 units?
```sql
SELECT 
    TO_CHAR(s.sale_date, 'MM-YYYY') AS month,
    SUM(s.quantity) AS total_units
FROM sales s
JOIN stores st ON s.store_id = st.store_id
WHERE st.country = 'USA'
  AND s.sale_date >= CURRENT_DATE - INTERVAL '3 years'
GROUP BY month
HAVING SUM(s.quantity) > 5000;
```

---

### 15. Which product category had the highest number of warranty claims in the last two years?
```sql
SELECT 
    c.category_name,
    COUNT(w.claim_id) AS total_claims
FROM warranty w
JOIN sales s ON w.sale_id = s.sale_id
JOIN products p ON p.product_id = s.product_id
JOIN category c ON c.category_id = p.category_id
WHERE w.claim_date >= CURRENT_DATE - INTERVAL '2 years'
GROUP BY c.category_name
ORDER BY total_claims DESC
LIMIT 1;
```

---

## 🟥 Advanced Analytical Challenges

### 16. What is the likelihood (in percentage) of a warranty claim occurring after a purchase, broken down by country?
```sql
SELECT 
    country,
    total_units_sold,
    total_claims,
    ROUND(COALESCE(total_claims::NUMERIC / total_units_sold * 100, 0), 2) AS claim_probability
FROM (
    SELECT 
        st.country,
        SUM(s.quantity) AS total_units_sold,
        COUNT(w.claim_id) AS total_claims
    FROM sales s
    JOIN stores st ON s.store_id = st.store_id
    LEFT JOIN warranty w ON w.sale_id = s.sale_id
    GROUP BY st.country
) t
ORDER BY claim_probability DESC;
```

---

### 17. What is the year-over-year sales growth ratio for each store?
```sql
WITH yearly_sales AS (
    SELECT 
        s.store_id,
        st.store_name,
        EXTRACT(YEAR FROM s.sale_date) AS year,
        SUM(s.quantity * p.price) AS total_sales
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    JOIN stores st ON s.store_id = st.store_id
    GROUP BY s.store_id, st.store_name, year
),
growth AS (
    SELECT 
        store_name,
        year,
        LAG(total_sales) OVER (PARTITION BY store_name ORDER BY year) AS last_year_sales,
        total_sales AS current_year_sales
    FROM yearly_sales
)
SELECT 
    store_name,
    year,
    last_year_sales,
    current_year_sales,
    ROUND((current_year_sales - last_year_sales) / last_year_sales * 100, 2) AS growth_percentage
FROM growth
WHERE last_year_sales IS NOT NULL;
```

---

### 18. How do warranty claims vary across different product price segments for items sold in the last five years?
```sql
SELECT 
    CASE
        WHEN p.price < 500 THEN 'Low Range'
        WHEN p.price BETWEEN 500 AND 1000 THEN 'Mid Range'
        ELSE 'High Range'
    END AS price_segment,
    COUNT(w.claim_id) AS total_claims
FROM warranty w
JOIN sales s ON w.sale_id = s.sale_id
JOIN products p ON p.product_id = s.product_id
WHERE w.claim_date >= CURRENT_DATE - INTERVAL '5 years'
GROUP BY price_segment;
```

---

### 19. Which store has the highest proportion of “Paid Repaired” claims relative to its total warranty claims?
```sql
WITH paid AS (
    SELECT 
        s.store_id,
        COUNT(w.claim_id) AS paid_repaired
    FROM sales s
    JOIN warranty w ON w.sale_id = s.sale_id
    WHERE w.repair_status = 'Paid Repaired'
    GROUP BY s.store_id
),
total AS (
    SELECT 
        s.store_id,
        COUNT(w.claim_id) AS total_claims
    FROM sales s
    JOIN warranty w ON w.sale_id = s.sale_id
    GROUP BY s.store_id
)
SELECT 
    t.store_id,
    st.store_name,
    p.paid_repaired,
    t.total_claims,
    ROUND(p.paid_repaired::NUMERIC / t.total_claims * 100, 2) AS paid_repair_percentage
FROM paid p
JOIN total t ON p.store_id = t.store_id
JOIN stores st ON st.store_id = t.store_id
ORDER BY paid_repair_percentage DESC


Great catch, Moinul! Here's the final question—**Question 20**—along with its SQL solution, completing your full set of business questions and answers:

---

### 20. What are the monthly running totals of sales revenue for each store over the past four years, and how do trends compare across time?
```sql
WITH monthly_sales AS (
    SELECT 
        s.store_id,
        EXTRACT(YEAR FROM s.sale_date) AS year,
        EXTRACT(MONTH FROM s.sale_date) AS month,
        SUM(p.price * s.quantity) AS total_revenue
    FROM sales s
    JOIN products p ON s.product_id = p.product_id
    WHERE s.sale_date >= CURRENT_DATE - INTERVAL '4 years'
    GROUP BY s.store_id, year, month
)
SELECT 
    store_id,
    year,
    month,
    total_revenue,
    SUM(total_revenue) OVER (
        PARTITION BY store_id 
        ORDER BY year, month
    ) AS running_total
FROM monthly_sales
ORDER BY store_id, year, month;

